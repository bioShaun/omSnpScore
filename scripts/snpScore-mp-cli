#!/usr/bin/env python3

import sys
import json
import click
import pandas as pd
from loguru import logger
from pathlib import Path
from snpScore import tableFromVcf, sample_and_group
from snpScore import tableFromSelectTable
from snpScore import snpTable, async_batch_sh_jobs
from snpScore import snpScoreBox, qtlSeqr, CHR_SIZE
from snpScore import outdir_suffix_from_params
from snpScore import merge_split_file, score_plot, wrap_param_arg
from snpScore import freq2qtlseqr, circos_suffix, circos_cfg, circos_plot

BY_CHR_BIN = "snpScore-bychr-cli"


@click.command()
@click.option('--vcf_dir',
              help=('vcf table directory, can be more than one '
                    '[--vcf_dir dir1 --vcf_dir dir2].'),
              type=click.Path(exists=True, file_okay=False),
              multiple=True)
@click.option('--vcf_ann_dir',
              help='snp annotation dir.',
              type=click.Path(exists=True, file_okay=False),
              default=None)
@click.option('-m',
              '--mutant',
              help='mutant sample ids, seperated with comma.',
              type=click.STRING,
              required=True)
@click.option('-w',
              '--wild',
              help='wild sample ids, seperated with comma.',
              type=click.STRING,
              required=True)
@click.option('-o',
              '--outdir',
              help='results directory.',
              required=True,
              type=click.Path())
@click.option('-t',
              '--thread',
              help='Max thread for this program to use.',
              default=4)
@click.option('-mp',
              '--mutant_parent',
              help='mutant parent sample ids, seperated with comma.',
              type=click.STRING,
              default='')
@click.option('-wp',
              '--wild_parent',
              help='wild parent sample ids, seperated with comma.',
              type=click.STRING,
              default='')
@click.option('-bg',
              '--background',
              help='background sample ids, seperated with comma.',
              type=click.STRING,
              default='')
@click.option('--chr_size',
              help='chr size file, default is chr size of bread wheat.',
              type=click.Path(exists=True, dir_okay=False),
              default=CHR_SIZE)
@click.option('--ref_freq',
              help=('filter out SNPs with a '
                    'Reference Allele Frequency '
                    'less than refAlleleFreq '
                    'and greater than 1 - refAlleleFreq.'),
              default=0.43,
              type=click.FLOAT)
@click.option('--p_ref_freq',
              help=('filter out parent SNPs with a '
                    'Reference Allele Frequency '
                    'less than refAlleleFreq '
                    'and greater than 1 - refAlleleFreq.'),
              default=0.43,
              type=click.FLOAT)
@click.option('--background_ref_freq',
              help=('filter out background SNPs with a '
                    'Reference Allele Frequency '
                    'less than refAlleleFreq '
                    'and greater than 1 - refAlleleFreq.'),
              default=0.43,
              type=click.FLOAT)
@click.option('--mutant_alt_exp',
              help='mutant alt frequency expectation.',
              default=None,
              type=click.FLOAT)
@click.option('--wild_alt_exp',
              help='wild alt frequency expectation.',
              default=None,
              type=click.FLOAT)
@click.option('--min_depth',
              help='minimal read depth for a site to include in analysis.',
              default=5,
              type=click.INT)
@click.option('--snp_number_window',
              help='snp number slidewindow window size.',
              default=20,
              type=click.INT)
@click.option('--snp_number_step',
              help='snp number slidewindow step size.',
              default=5,
              type=click.INT)
@click.option('--filter_method',
              help=('varscore filter method'),
              default='nonsymmetrical',
              type=click.STRING)
@click.option('--qtlseqr', is_flag=True, help='Run qtlseqr analysis.')
@click.option('--ed', is_flag=True, help='Run snp ED analysis.')
@click.option('--pop_stru',
              help=('the population structure. '
                    'Defaults to "F2" and assumes "RIL" otherwise.'),
              default='RIL',
              type=click.STRING)
@click.option('--qtlseqr_ref_freq',
              help='qtlseqr ref freq.',
              default=0.3,
              type=click.FLOAT)
@click.option('--qtlseqr_min_depth',
              help='qtlseqr min depth.',
              default=5,
              type=click.INT)
@click.option('--qtlseqr_window',
              help='snp window size for calculation.',
              default=1e7,
              type=click.INT)
@click.option('--pop_stru',
              help=('the population structure. '
                    'Defaults to "F2" and assumes "RIL" otherwise.'),
              default='RIL',
              type=click.STRING)
def main(vcf_dir, vcf_ann_dir, mutant, wild, outdir, thread, mutant_parent,
         wild_parent, background, mutant_alt_exp, wild_alt_exp, min_depth,
         snp_number_window, snp_number_step, qtlseqr_window, ref_freq,
         pop_stru, qtlseqr, ed, p_ref_freq, background_ref_freq, chr_size,
         filter_method, qtlseqr_ref_freq, qtlseqr_min_depth):

    chr_size_df = pd.read_csv(chr_size, sep='\t', header=None, index_col=0)
    cmd_list = []

    sample_list, group_list = sample_and_group(mutant, wild, mutant_parent,
                                               wild_parent, background)

    ann_number = 100

    outdir = Path(outdir)

    for chr_i in chr_size_df.index:
        param_wrap_arg = wrap_param_arg(sys.argv[1:])
        arg_line = ' '.join(param_wrap_arg)
        arg_line.replace('--circos', '')
        cmd_i = f'{BY_CHR_BIN} {arg_line} --chrom {chr_i}'
        cmd_list.append(cmd_i)
    logger.info('Calculating score ...')
    async_batch_sh_jobs(cmd_list, thread=thread)
    logger.info('Ploting score ...')
    snp_score_methods = []
    snp_score_methods.append('var')

    snpscore_obj = snpScoreBox(alt_freq_df=None,
                               grp_list=group_list,
                               method_list=snp_score_methods,
                               outdir=outdir,
                               chr_size=chr_size,
                               min_depth=min_depth,
                               snp_number_window=snp_number_window,
                               snp_number_step=snp_number_step,
                               ref_freq=ref_freq,
                               p_ref_freq=p_ref_freq,
                               background_ref_freq=background_ref_freq,
                               mutant_alt_exp=mutant_alt_exp,
                               wild_alt_exp=wild_alt_exp,
                               filter_method=filter_method)

    plot_cmd = []
    snp_score_file_pattern = f'{snpscore_obj.score_prefix}.var.score.csv'
    snp_score_file = merge_split_file(outdir,
                                      snp_score_file_pattern,
                                      sortby=["Chrom", "Start"])
    plot_cmd.append(
        score_plot(snp_score_file, 'var', snp_score_file.stem, CHR_SIZE,
                   'web'))
    snp_score_ann_file_pattern = f'{snpscore_obj.score_prefix}.var.score.top{ann_number}.ann.csv'
    snp_score_ann_file = merge_split_file(outdir,
                                          snp_score_ann_file_pattern,
                                          sortby=["Chrom", "Start"])

    snp_freq_file = merge_split_file(
        outdir,
        f"{snpscore_obj.group_label}.snp.freq.csv",
        sortby=["Chr", "Pos"])
    plot_cmd.append(
        score_plot(snp_freq_file, 'density', snp_freq_file.stem, CHR_SIZE,
                   'web'))
    qtlseqr_obj = qtlSeqr(input_table='test',
                          window=qtlseqr_window,
                          ref_freq=qtlseqr_ref_freq,
                          pop_stru=pop_stru,
                          min_sample_dp=qtlseqr_min_depth,
                          out_dir=outdir,
                          run_qtlseqr=qtlseqr,
                          run_ed=ed,
                          web=True)
    qtlseqr_file = merge_split_file(outdir,
                                    qtlseqr_obj.filePath.name,
                                    sortby=["CHROM", "POS"])
    plot_cmd.append(
        score_plot(qtlseqr_file, 'Gprime', qtlseqr_file.stem, CHR_SIZE, 'web'))
    plot_cmd.append(
        score_plot(qtlseqr_file, 'ED', qtlseqr_file.stem, CHR_SIZE, 'web'))
    plot_cmd.append(
        score_plot(qtlseqr_file, 'snpIndex', qtlseqr_file.stem, CHR_SIZE,
                   'web'))
    """ if circos:
        circos_name = circos_suffix(snpscore_obj.score_prefix,
                                    qtlseqr_obj.filePath.stem)
        circos_dir = outdir / 'circos_data' / circos_name
        circos_plot_path = circos_cfg(circos_dir)
        if not circos_plot_path.is_file():
            plot_cmd.append(
                circos_plot(snp_score_file, qtlseqr_file, snp_freq_file,
                            circos_dir)) """
    plot_cmd = list(filter(None, plot_cmd))
    async_batch_sh_jobs(plot_cmd, thread=thread)
    logger.info('Fin.')


if __name__ == '__main__':
    main()
