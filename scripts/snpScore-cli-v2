#!/usr/bin/env python3

import click
from loguru import logger
from pathlib import Path
from snpScore import tableFromVcf, sample_and_group
from snpScore import snpTable, async_batch_sh_jobs
from snpScore import snpScoreBox, qtlSeqr


@click.command()
@click.option('--vcf_file',
              help=('vcf file path, can be more than one '
                    '[--vcf_file vcf1 --vcf_file vcf2]'),
              type=click.Path(exists=True, dir_okay=False),
              multiple=True)
@click.option('--vcf_dir',
              help=('vcf table directory, can be more than one '
                    '[--vcf_dir dir1 --vcf_dir dir2].'),
              type=click.Path(exists=True, file_okay=False),
              multiple=True)
@click.option('-m',
              '--mutant',
              help='mutant sample ids, seperated with comma.',
              type=click.STRING,
              required=True)
@click.option('-w',
              '--wild',
              help='wild sample ids, seperated with comma.',
              type=click.STRING,
              required=True)
@click.option('-o',
              '--outdir',
              help='results directory.',
              required=True,
              type=click.Path())
@click.option('-t',
              '--thread',
              help='Max thread for this program to use.',
              default=4)
@click.option('-mp',
              '--mutant_parent',
              help='mutant parent sample ids, seperated with comma.',
              type=click.STRING,
              default='')
@click.option('-wp',
              '--wild_parent',
              help='wild parent sample ids, seperated with comma.',
              type=click.STRING,
              default='')
@click.option('-bg',
              '--background',
              help='background sample ids, seperated with comma.',
              type=click.STRING,
              default='')
@click.option('--vcf_ann_file',
              help='snp annotation file.',
              type=click.Path(exists=True, dir_okay=False),
              default=None)
@click.option('--vcf_split_dir',
              help=('Directory to save snp pickle file for each sample.'
                    'Default is outdir/pickle'),
              default=None)
@click.option('--mutant_alt_exp',
              help='mutant alt frequency expectation.',
              default=None,
              type=click.FLOAT)
@click.option('--wild_alt_exp',
              help='wild alt frequency expectation.',
              default=None,
              type=click.FLOAT)
@click.option('--mutant_parent_alt_exp',
              help='mutant parent alt frequency expectation.',
              default=None,
              type=click.FLOAT)
@click.option('--wild_parent_alt_exp',
              help='wild parent alt frequency expectation.',
              default=None,
              type=click.FLOAT)
@click.option('--background_alt_exp',
              help='background alt frequency expectation.',
              default=None,
              type=click.FLOAT)
@click.option('--min_depth',
              help='minimal read depth for a site to include in analysis.',
              default=5,
              type=click.INT)
@click.option('--snp_number_window',
              help='snp number slidewindow window size.',
              default=20,
              type=click.INT)
@click.option('--snp_number_step',
              help='snp number slidewindow step size.',
              default=5,
              type=click.INT)
@click.option('--varscore', is_flag=True, help='Run var score analysis.')
@click.option('--snp_index', is_flag=True, help='Run snp index analysis.')
@click.option('--qtlseqr', is_flag=True, help='Run qtlseqr analysis.')
@click.option('--qtlseqr_window',
              help='snp window size for calculation.',
              default=1e7,
              type=click.INT)
@click.option('--qtlseqr_window',
              help='snp window size for calculation.',
              default=1e7,
              type=click.INT)
@click.option('--qtlseqr_ref_freq',
              help=('filter out SNPs with a '
                    'Reference Allele Frequency '
                    'less than refAlleleFreq '
                    'and greater than 1 - refAlleleFreq.'),
              default=0.3,
              type=click.FLOAT)
@click.option('--pop_stru',
              help=('the population structure. '
                    'Defaults to "F2" and assumes "RIL" otherwise.'),
              default='RIL',
              type=click.STRING)
def main(vcf_file, vcf_dir, mutant, wild, outdir, thread, vcf_split_dir,
         mutant_parent, wild_parent, background, mutant_alt_exp, wild_alt_exp,
         mutant_parent_alt_exp, wild_parent_alt_exp, background_alt_exp,
         min_depth, snp_number_window, snp_number_step, vcf_ann_file,
         qtlseqr_window, qtlseqr_ref_freq, pop_stru, qtlseqr, varscore,
         snp_index):
    if vcf_file:
        if vcf_split_dir is None:
            vcf_split_dir = Path(outdir) / 'pickle'
        for vcf_i in vcf_file:
            vcf2tb_obj = tableFromVcf(vcf=vcf_i,
                                      out_dir=vcf_split_dir,
                                      thread=thread)
            vcf2tb_obj.make_table
            vcf_dir = list(vcf_dir)
            vcf_dir.append(vcf_split_dir)

    sample_list, group_list = sample_and_group(mutant, wild, mutant_parent,
                                               wild_parent, background)
    snp_table_obj = snpTable(out_dir=outdir,
                             table_dirs=vcf_dir,
                             samples=sample_list,
                             sample_label=group_list,
                             min_depth=min_depth)

    run_jobs = []
    if qtlseqr:
        qtlseqr_obj = qtlSeqr(input_table=snp_table_obj.qtlseqr_snp_table,
                              window=qtlseqr_window,
                              ref_freq=qtlseqr_ref_freq,
                              pop_stru=pop_stru,
                              min_sample_dp=min_depth,
                              out_dir=outdir)
        run_jobs.append(qtlseqr_obj.qtlseqr_job)

    snp_score_methods = []
    if varscore:
        snp_score_methods.append('var')
    if snp_index:
        snp_score_methods.append('snp_index')

    snpscore_obj = snpScoreBox(alt_freq_df=snp_table_obj.alt_freq_df,
                               grp_list=group_list,
                               method_list=snp_score_methods,
                               outdir=outdir,
                               min_depth=min_depth,
                               snp_number_window=snp_number_window,
                               snp_number_step=snp_number_step,
                               mutant_alt_exp=mutant_alt_exp,
                               wild_alt_exp=wild_alt_exp,
                               mutant_parent_alt_exp=mutant_parent_alt_exp,
                               wild_parent_alt_exp=wild_parent_alt_exp,
                               background_alt_exp=background_alt_exp,
                               vcf_ann_file=vcf_ann_file)
    run_jobs.extend(snpscore_obj.score_jobs)
    logger.info('Launch snpScore jobs...')
    async_batch_sh_jobs(run_jobs, thread=thread)
    logger.info('The End.')


if __name__ == '__main__':
    main()
