#!/usr/bin/env python3

import sys
import json
import click
import pandas as pd
from loguru import logger
from pathlib import Path
from snpScore import tableFromVcf, sample_and_group_for_web
from snpScore import tableFromSelectTable
from snpScore import snpTable, async_batch_sh_jobs
from snpScore import snpScoreBox, qtlSeqr, CHR_SIZE
from snpScore import outdir_suffix_from_params
from snpScore import merge_split_file, score_plot, wrap_param_arg
from snpScore import freq2qtlseqr

BY_CHR_BIN = "snpScore-bychr"


@click.command()
@click.option('-p',
              '--parameters',
              help='snpScore parameters json string.',
              required=True,
              type=click.STRING)
@click.option('--vcf_dir',
              help=('vcf table directory, can be more than one '
                    '[--vcf_dir dir1 --vcf_dir dir2].'),
              type=click.Path(exists=True, file_okay=False),
              multiple=True)
@click.option('--vcf_ann_dir',
              help='snp annotation dir.',
              required=True,
              type=click.Path())
@click.option('--chr_size',
              help='chr size file, default is chr size of bread wheat.',
              type=click.Path(exists=True, dir_okay=False),
              default=CHR_SIZE)
@click.option('-o',
              '--outdir',
              help='results directory.',
              required=True,
              type=click.Path())
@click.option('-t',
              '--thread',
              help='paralle number',
              default=32,
              type=click.INT)
def main(parameters, vcf_dir, vcf_ann_dir, chr_size, outdir, thread):

    chr_size_df = pd.read_csv(CHR_SIZE, sep='\t', header=None, index_col=0)
    cmd_list = []

    parameters_obj = json.loads(parameters)
    sample_list, group_list = sample_and_group_for_web(parameters_obj)

    input_params = dict()
    for param_i in parameters_obj:
        if parameters_obj[param_i]:
            input_params.update({param_i: parameters_obj[param_i]})

    outdir = Path(outdir)
    outdir_suffix = outdir_suffix_from_params(parameters_obj)
    outdir = outdir.resolve()
    full_outdir = outdir / outdir_suffix
    results_dir = full_outdir / 'results'

    for chr_i in chr_size_df.index:
        param_wrap_arg = wrap_param_arg(sys.argv[1:])
        arg_line = ' '.join(param_wrap_arg)
        cmd_i = f'{BY_CHR_BIN} {arg_line} --chrom {chr_i}'
        cmd_list.append(cmd_i)
    logger.info('Calculating score ...')
    async_batch_sh_jobs(cmd_list, thread=thread)
    logger.info('Ploting score ...')
    snp_score_methods = []
    snp_score_methods.append('var')
    """ if snp_index:
        snp_score_methods.append('snp_index')
    if est:
        snp_score_methods.extend(['est_mut_alt', 'est_mut_ref']) """
    plot_cmd = []
    for method in snp_score_methods:
        snp_score_file_pattern = f'*{method}.score.csv'
        for snp_score_file in merge_split_file(results_dir,
                                               snp_score_file_pattern,
                                               sortby=["Chrom", "Start"]):
            plot_cmd.append(
                score_plot(snp_score_file, method, snp_score_file.stem,
                           CHR_SIZE, 'web'))
        snp_score_ann_file_pattern = f'*{method}.score.ann.csv'
        for snp_score_ann_file in merge_split_file(results_dir,
                                                   snp_score_ann_file_pattern,
                                                   sortby=["Chrom", "Start"]):
            pass
    for snp_freq_file in merge_split_file(results_dir,
                                          "*.snp.freq.csv",
                                          sortby=["Chr", "Pos"]):
        plot_cmd.append(
            score_plot(snp_freq_file, 'density', snp_freq_file.stem, CHR_SIZE,
                       'web'))
        if input_params.get('qtlseqr') or input_params.get('ed'):
            qtlseqr_snp_table = freq2qtlseqr(snp_freq_file)
            out_prefix = str(snp_freq_file).replace(".snp.freq.csv", "")
            qtlseqr_obj = qtlSeqr(
                input_table=qtlseqr_snp_table,
                window=input_params.get('qtlseqr_window', 1e7),
                ref_freq=0.3,
                pop_stru=input_params.get('pop_stru', 'RIL'),
                min_sample_dp=input_params.get('min_depth', 5),
                out_dir=out_prefix,
                run_qtlseqr=input_params.get('qtlseqr'),
                run_ed=False,
                web=True)
            ed_obj = qtlSeqr(input_table=qtlseqr_snp_table,
                             window=input_params.get('qtlseqr_window', 1e7),
                             ref_freq=0.3,
                             pop_stru=input_params.get('pop_stru', 'RIL'),
                             min_sample_dp=input_params.get('min_depth', 5),
                             out_dir=out_prefix,
                             run_qtlseqr=False,
                             run_ed=input_params.get('ed'),
                             web=True)
            plot_cmd.append(qtlseqr_obj.qtlseqr_job)
            plot_cmd.append(ed_obj.qtlseqr_job)

    plot_cmd = list(filter(None, plot_cmd))
    async_batch_sh_jobs(plot_cmd, thread=thread)
    logger.info('Fin.')
    print(full_outdir)


if __name__ == '__main__':
    main()
