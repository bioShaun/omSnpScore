#!/usr/bin/env python3

import sys
import json
import click
import pandas as pd
from loguru import logger
from pathlib import Path
from snpScore import tableFromVcf, sample_and_group_for_web
from snpScore import tableFromSelectTable
from snpScore import snpTable, async_batch_sh_jobs
from snpScore import snpScoreBox, qtlSeqr, CHR_SIZE
from snpScore import outdir_suffix_from_params
from snpScore import merge_split_file, score_plot, wrap_param_arg
from snpScore import freq2qtlseqr, circos_suffix, circos_cfg, circos_plot

BY_CHR_BIN = "snpScore-bychr"


@click.command()
@click.option('-p',
              '--parameters',
              help='snpScore parameters json string.',
              required=True,
              type=click.STRING)
@click.option('--vcf_dir',
              help=('vcf table directory, can be more than one '
                    '[--vcf_dir dir1 --vcf_dir dir2].'),
              type=click.Path(exists=True, file_okay=False),
              multiple=True)
@click.option('--vcf_ann_dir',
              help='snp annotation dir.',
              required=True,
              type=click.Path())
@click.option('--chr_size',
              help='chr size file, default is chr size of bread wheat.',
              type=click.Path(exists=True, dir_okay=False),
              default=CHR_SIZE)
@click.option('-o',
              '--outdir',
              help='results directory.',
              required=True,
              type=click.Path())
@click.option('-t',
              '--thread',
              help='paralle number',
              default=8,
              type=click.INT)
@click.option('--circos', help='generate circos plot', is_flag=True)
def main(parameters, vcf_dir, vcf_ann_dir, chr_size, outdir, thread, circos):

    chr_size_df = pd.read_csv(CHR_SIZE, sep='\t', header=None, index_col=0)
    cmd_list = []

    parameters_obj = json.loads(parameters)
    sample_list, group_list = sample_and_group_for_web(parameters_obj)

    input_params = dict()
    for param_i in parameters_obj:
        if parameters_obj[param_i]:
            input_params.update({param_i: parameters_obj[param_i]})
    ann_number = input_params.get('ann_number', 100)

    outdir = Path(outdir)
    outdir_suffix = outdir_suffix_from_params(parameters_obj)
    outdir = outdir.resolve()
    full_outdir = outdir / outdir_suffix
    results_dir = full_outdir / 'results'
    for chr_i in chr_size_df.index:
        param_wrap_arg = wrap_param_arg(sys.argv[1:])
        arg_line = ' '.join(param_wrap_arg)
        cmd_i = f'{BY_CHR_BIN} {arg_line} --chrom {chr_i}'
        cmd_list.append(cmd_i)
    logger.info('Calculating score ...')
    async_batch_sh_jobs(cmd_list, thread=thread)
    logger.info('Ploting score ...')
    snp_score_methods = []
    snp_score_methods.append('var')

    snpscore_obj = snpScoreBox(
        alt_freq_df=None,
        grp_list=group_list,
        method_list=snp_score_methods,
        outdir=results_dir,
        chr_size=chr_size,
        min_depth=input_params.get('min_depth', 5),
        snp_number_window=input_params.get('snp_number_window', 20),
        snp_number_step=input_params.get('snp_number_step', 5),
        ref_freq=input_params.get('ref_freq', 0.3),
        p_ref_freq=input_params.get('p_ref_freq', 0.3),
        background_ref_freq=input_params.get('background_ref_freq', 0.3),
        mutant_alt_exp=input_params.get('mutant_alt_exp'),
        wild_alt_exp=input_params.get('wild_alt_exp'),
        filter_method=input_params.get('filter_method', "nonsymmetrical"))

    plot_cmd = []
    snp_score_file_pattern = f'{snpscore_obj.score_prefix}.var.score.csv'
    snp_score_file = merge_split_file(results_dir,
                                      snp_score_file_pattern,
                                      sortby=["Chrom", "Start"])
    plot_cmd.append(
        score_plot(snp_score_file, 'var', snp_score_file.stem, CHR_SIZE,
                   'web'))
    snp_score_ann_file_pattern = f'{snpscore_obj.score_prefix}.var.score.top{ann_number}.ann.csv'
    snp_score_ann_file = merge_split_file(results_dir,
                                          snp_score_ann_file_pattern,
                                          sortby=["Chrom", "Start"])

    snp_freq_file = merge_split_file(
        results_dir,
        f"{snpscore_obj.group_label}.snp.freq.csv",
        sortby=["Chr", "Pos"])
    plot_cmd.append(
        score_plot(snp_freq_file, 'density', snp_freq_file.stem, CHR_SIZE,
                   'web'))
    qtlseqr_obj = qtlSeqr(input_table='test',
                          window=input_params.get('qtlseqr_window', 1e7),
                          ref_freq=input_params.get('qtlseqr_ref_freq', 0.3),
                          pop_stru=input_params.get('pop_stru', 'RIL'),
                          min_sample_dp=input_params.get(
                              'qtlseqr_min_depth', 5),
                          out_dir=results_dir,
                          run_qtlseqr=input_params.get('qtlseqr'),
                          run_ed=input_params.get('ed'),
                          web=True)
    qtlseqr_file = merge_split_file(results_dir,
                                    qtlseqr_obj.filePath.name,
                                    sortby=["CHROM", "POS"])
    plot_cmd.append(
        score_plot(qtlseqr_file, 'Gprime', qtlseqr_file.stem, CHR_SIZE, 'web'))
    plot_cmd.append(
        score_plot(qtlseqr_file, 'ED', qtlseqr_file.stem, CHR_SIZE, 'web'))
    plot_cmd.append(
        score_plot(qtlseqr_file, 'snpIndex', qtlseqr_file.stem, CHR_SIZE,
                   'web'))
    if circos:
        circos_name = circos_suffix(snpscore_obj.score_prefix,
                                    qtlseqr_obj.filePath.stem)
        circos_dir = results_dir / circos_name
        circos_plot_path = circos_cfg(circos_dir)
        if not circos_plot_path.is_file():
            plot_cmd.append(
                circos_plot(snp_score_file, qtlseqr_file, snp_freq_file,
                            circos_dir))
    logger.info('Fin.')
    plot_cmd = list(filter(None, plot_cmd))
    async_batch_sh_jobs(plot_cmd, thread=thread)
    print(full_outdir)


if __name__ == '__main__':
    main()
