#!/usr/bin/env python3

import re
import sys
import fire
import yaml
import sqlalchemy
import pandas as pd
from addict import Dict
from loguru import logger
from typing import List, Callable, Union
from pathlib import Path
from functools import reduce
from sqlalchemy import create_engine
from pandarallel import pandarallel

pandarallel.initialize(nb_workers=8)

LOCUS_TABLE_COL = ("chrom", "pos", "ref", "alt")


def allele2list(allele: str) -> List[int]:
    return [int(each) for each in allele.split(',')]


def allele2depth(allele: str) -> int:
    return sum(allele2list(allele))


def allele2freq(allele: str) -> str:
    allele_depth = allele2depth(allele)
    if allele_depth == 0:
        return '0'

    def float_to_round3_str(freq: float) -> str:
        if int(freq) == freq:
            return str(int(freq))
        return str(round(freq, 3))

    allele_freq_list = [
        float_to_round3_str(each / allele_depth)
        for each in allele2list(allele)
    ]

    return ','.join(allele_freq_list[1:])


def createEngine(user: str, password: str, host: str, port: str,
                 db: str) -> sqlalchemy.engine.base.Engine:
    return create_engine(
        f'postgresql+psycopg2://{user}:{password}@{host}:{port}/{db}')


def loadCfg(postgres_cfg: Path) -> Dict:
    if postgres_cfg.is_file():
        with open(postgres_cfg) as cfg:
            return Dict(yaml.full_load(cfg))
    else:
        sys.exit('postgres config not found!')


def saveStats(info_df: pd.DataFrame, stats_df: pd.DataFrame,
              function: Union[Callable,
                              None], stats_type: str) -> pd.DataFrame:
    cp_stats_df = stats_df.copy()
    if function is not None:
        cp_stats_df = cp_stats_df.parallel_applymap(function)
    merged_df = info_df.merge(cp_stats_df, left_index=True, right_index=True)
    info_cols = list(info_df.columns)
    melt_df = merged_df.melt(id_vars=info_cols,
                             var_name='sample_id',
                             value_name=stats_type)
    return melt_df


def saveVcfStats(vcfTable: str, postgres_cfg=str) -> None:
    logger.info(f'Loading Table ...')
    vcf_df = pd.read_csv(vcfTable, sep='\t')
    info_cols = vcf_df.columns[:6]
    stats_cols = vcf_df.columns[6:]
    vcf_info_df = vcf_df.loc[:, info_cols].copy()
    vcf_info_df.columns = [
        'chrom', 'pos', 'snp_type', 'ref', 'alt', 'snp_qual'
    ]
    vcf_allele_df = vcf_df.loc[:, stats_cols].copy()
    sample_names = [re.sub('.AD$', '', each) for each in stats_cols]
    vcf_allele_df.columns = sample_names
    logger.info(f'Generating allele df ...')
    allele_df = saveStats(vcf_info_df, vcf_allele_df, None, 'allele')
    logger.info(f'Generating allele depth df ...')
    depth_df = saveStats(vcf_info_df, vcf_allele_df, allele2depth,
                         'allele_depth')
    logger.info(f'Generating alt allele freq df ...')
    freq_df = saveStats(vcf_info_df, vcf_allele_df.copy(), allele2freq,
                        'alt_freq')
    logger.info(f'Merging stats ...')
    merged_df = reduce(pd.merge, [depth_df, freq_df], allele_df)
    filter_df = merged_df[merged_df['allele_depth'] > 0]

    # sql engine
    cfg_obj = loadCfg(Path(postgres_cfg))
    sql_engine = createEngine(cfg_obj.postgres_user, cfg_obj.postgres_password,
                              cfg_obj.postgres_host, cfg_obj.postgres_port,
                              cfg_obj.postgres_datebase)

    logger.info(f'Loading snp locus ...')
    sql_command = f"select * from {cfg_obj.locus_table}"
    locus_df = pd.read_sql(sql_command, sql_engine)

    merged_df = locus_df.merge(filter_df, how='right')
    non_locus_df = merged_df[merged_df['id'].isna()]
    if not non_locus_df.empty:
        logger.error(
            f'{len(non_locus_df)} allele records without locus info in db.')
        sys.exit(1)

    merged_df.drop(list(LOCUS_TABLE_COL), axis=1, inplace=True)
    merged_df.rename(columns={'id': 'snpId'}, inplace=True)
    logger.info(f'saving {len(filter_df)} records ...')
    merged_df.to_sql(cfg_obj.allele_table,
                     sql_engine,
                     if_exists='append',
                     index=False,
                     chunksize=10000)
    logger.info(f'Fin')


if __name__ == "__main__":
    fire.Fire(saveVcfStats)