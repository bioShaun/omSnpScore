#!/usr/bin/env python3

import click
import json
from loguru import logger
from pathlib import Path
from snpScore import tableFromVcf, sample_and_group_for_web
from snpScore import tableFromSelectTable
from snpScore import snpTableMP, async_batch_sh_jobs
from snpScore import snpScoreBox, qtlSeqr, CHR_SIZE
from snpScore import outdir_suffix_from_params


@click.command()
@click.option('-p',
              '--parameters',
              help='snpScore parameters json string.',
              required=True,
              type=click.STRING)
@click.option('-d',
              '--vcf_dir',
              help=('vcf table directory, can be more than one '
                    '[--vcf_dir dir1 --vcf_dir dir2].'),
              type=click.Path(exists=True, file_okay=False),
              multiple=True)
@click.option('--vcf_ann_dir',
              help='snp annotation dir.',
              required=True,
              type=click.Path(exists=True, file_okay=False))
@click.option('--chr_size',
              help='chr size file, default is chr size of bread wheat.',
              type=click.Path(exists=True, dir_okay=False),
              default=CHR_SIZE)
@click.option('-o',
              '--outdir',
              help='results directory.',
              required=True,
              type=click.Path())
@click.option('--chrom',
              help='results directory.',
              required=True,
              type=click.STRING)
def main(parameters, vcf_dir, vcf_ann_dir, chr_size, outdir, chrom):
    parameters_obj = json.loads(parameters)
    sample_list, group_list = sample_and_group_for_web(parameters_obj)

    outdir = Path(outdir)
    outdir_suffix = outdir_suffix_from_params(parameters_obj)
    outdir = outdir.resolve()
    full_outdir = outdir / outdir_suffix
    results_dir = full_outdir / f'results/split/{chrom}'

    input_params = dict()
    for param_i in parameters_obj:
        if parameters_obj[param_i]:
            input_params.update({param_i: parameters_obj[param_i]})

    min_depth = input_params.get('min_depth', 5)
    ref_freq = input_params.get('ref_freq', 0.43)

    snp_table_obj = snpTableMP(out_dir=results_dir,
                               table_dirs=vcf_dir,
                               samples=sample_list,
                               sample_label=group_list,
                               min_depth=min_depth,
                               chrom=chrom)

    snp_score_methods = []
    snp_score_methods.append('var')
    if input_params.get('snp_index'):
        snp_score_methods.append('snp_index')
    if input_params.get('est'):
        snp_score_methods.extend(['est_mut_alt', 'est_mut_ref'])

    vcf_ann_file = Path(vcf_ann_dir) / f'{chrom}' / 'snp.ann.table.pkl'

    snpscore_obj = snpScoreBox(
        alt_freq_df=snp_table_obj.alt_freq_df,
        grp_list=group_list,
        method_list=snp_score_methods,
        outdir=results_dir,
        chr_size=chr_size,
        min_depth=min_depth,
        snp_number_window=input_params.get('snp_number_window', 20),
        snp_number_step=input_params.get('snp_number_step', 5),
        ref_freq=ref_freq,
        p_ref_freq=input_params.get('p_ref_freq', 0.3),
        background_ref_freq=input_params.get('background_ref_freq', 0.3),
        mutant_alt_exp=input_params.get('mutant_alt_exp'),
        wild_alt_exp=input_params.get('wild_alt_exp'),
        vcf_ann_file=vcf_ann_file)
    snpscore_obj.score_jobs
    """run_jobs.extend(snpscore_obj.score_jobs)
    logger.info('Launch snpScore jobs...')
    async_batch_sh_jobs(run_jobs, thread=4)
    logger.info('The End.')
    print(full_outdir) """


if __name__ == '__main__':
    main()
