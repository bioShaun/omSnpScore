#!/usr/bin/env python3

import sys
import click
import timeit
import pandas as pd
from loguru import logger
from pathlib import Path
from snpScore import tableFromVcfMP, sample_and_group
from snpScore import async_batch_sh_jobs, replace_outdir
from snpScore import CHR_SIZE, score_plot, merge_split_file

BY_CHR_BIN = "python /public/scripts/omSnpScore/scripts/snpScore-cli-chr"


@click.command()
@click.option('--vcf_file',
              help=('vcf file path, can be more than one '
                    '[--vcf_file vcf1 --vcf_file vcf2]'),
              type=click.Path(exists=True, dir_okay=False),
              multiple=True)
@click.option('--vcf_dir',
              help=('vcf table directory, can be more than one '
                    '[--vcf_dir dir1 --vcf_dir dir2].'),
              type=click.Path(exists=True, file_okay=False),
              multiple=True)
@click.option('-m',
              '--mutant',
              help='mutant sample ids, seperated with comma.',
              type=click.STRING,
              required=True)
@click.option('-w',
              '--wild',
              help='wild sample ids, seperated with comma.',
              type=click.STRING,
              required=True)
@click.option('-o',
              '--outdir',
              help='results directory.',
              required=True,
              type=click.Path())
@click.option('-t',
              '--thread',
              help='Max thread for this program to use.',
              default=4)
@click.option('-mp',
              '--mutant_parent',
              help='mutant parent sample ids, seperated with comma.',
              type=click.STRING,
              default='')
@click.option('-wp',
              '--wild_parent',
              help='wild parent sample ids, seperated with comma.',
              type=click.STRING,
              default='')
@click.option('-bg',
              '--background',
              help='background sample ids, seperated with comma.',
              type=click.STRING,
              default='')
@click.option('--vcf_ann_file',
              help='snp annotation file.',
              type=click.Path(exists=True, dir_okay=False),
              default=None)
@click.option('--chr_size',
              help='chr size file, default is chr size of bread wheat.',
              type=click.Path(exists=True, dir_okay=False),
              default=CHR_SIZE)
@click.option('--vcf_split_dir',
              help=('Directory to save snp pickle file for each sample.'
                    'Default is outdir/pickle'),
              default=None)
@click.option('--ref_freq',
              help=('filter out SNPs with a '
                    'Reference Allele Frequency '
                    'less than refAlleleFreq '
                    'and greater than 1 - refAlleleFreq.'),
              default=0.3,
              type=click.FLOAT)
@click.option('--p_ref_freq',
              help=('filter out parent SNPs with a '
                    'Reference Allele Frequency '
                    'less than refAlleleFreq '
                    'and greater than 1 - refAlleleFreq.'),
              default=0.3,
              type=click.FLOAT)
@click.option('--background_ref_freq',
              help=('filter out background SNPs with a '
                    'Reference Allele Frequency '
                    'less than refAlleleFreq '
                    'and greater than 1 - refAlleleFreq.'),
              default=0.3,
              type=click.FLOAT)
@click.option('--mutant_alt_exp',
              help='mutant alt frequency expectation.',
              default=None,
              type=click.FLOAT)
@click.option('--wild_alt_exp',
              help='wild alt frequency expectation.',
              default=None,
              type=click.FLOAT)
@click.option('--min_depth',
              help='minimal read depth for a site to include in analysis.',
              default=5,
              type=click.INT)
@click.option('--snp_number_window',
              help='snp number slidewindow window size.',
              default=20,
              type=click.INT)
@click.option('--snp_number_step',
              help='snp number slidewindow step size.',
              default=5,
              type=click.INT)
@click.option('--varscore', is_flag=True, help='Run var score analysis.')
@click.option('--snp_index', is_flag=True, help='Run snp index analysis.')
@click.option('--est', is_flag=True, help='Run score estimate score analysis.')
@click.option('--qtlseqr', is_flag=True, help='Run qtlseqr analysis.')
@click.option('--ed', is_flag=True, help='Run snp ED analysis.')
@click.option('--qtlseqr_window',
              help='snp window size for calculation.',
              default=1e7,
              type=click.INT)
@click.option('--qtlseqr_window',
              help='snp window size for calculation.',
              default=1e7,
              type=click.INT)
@click.option('--pop_stru',
              help=('the population structure. '
                    'Defaults to "F2" and assumes "RIL" otherwise.'),
              default='RIL',
              type=click.STRING)
def main(vcf_file, vcf_dir, mutant, wild, outdir, thread, vcf_split_dir,
         mutant_parent, wild_parent, background, mutant_alt_exp, wild_alt_exp,
         min_depth, snp_number_window, snp_number_step, vcf_ann_file,
         qtlseqr_window, ref_freq, pop_stru, qtlseqr, varscore, snp_index, est,
         ed, p_ref_freq, background_ref_freq, chr_size):

    start = timeit.default_timer()
    if vcf_file:
        vcf_dir = list(vcf_dir)
        if vcf_split_dir is None:
            vcf_split_dir = Path(outdir) / 'pickle'
        for vcf_i in vcf_file:
            vcf2tb_obj = tableFromVcfMP(vcf=vcf_i,
                                        out_dir=vcf_split_dir,
                                        thread=thread)
            vcf2tb_obj.make_table
            vcf_dir.append(vcf_split_dir)

    chr_size_df = pd.read_csv(CHR_SIZE, sep='\t', header=None, index_col=0)
    cmd_list = []

    for chr_i in chr_size_df.index:
        chr_argv = replace_outdir(sys.argv[1:], chr_i)
        arg_line = ' '.join(chr_argv)
        cmd_i = f'{BY_CHR_BIN} {arg_line} --chrom {chr_i}'
        cmd_list.append(cmd_i)
    logger.info('Calculating score ...')
    async_batch_sh_jobs(cmd_list, thread=thread)
    logger.info('Ploting score ...')
    snp_score_methods = []
    if varscore:
        snp_score_methods.append('var')
    if snp_index:
        snp_score_methods.append('snp_index')
    if est:
        snp_score_methods.extend(['est_mut_alt', 'est_mut_ref'])
    plot_cmd = []
    for method in snp_score_methods:
        snp_score_file_pattern = f'*{method}.score.csv'
        snp_score_file = merge_split_file(outdir, snp_score_file_pattern)
        plot_cmd.append(
            score_plot(snp_score_file, method, snp_score_file.stem, CHR_SIZE,
                       'web'))
    snp_freq_file = merge_split_file(outdir, "*snp.freq.csv")
    plot_cmd.append(
        score_plot(snp_freq_file, 'density', snp_freq_file.stem, CHR_SIZE,
                   'web'))
    async_batch_sh_jobs(plot_cmd, thread=thread)
    end = timeit.default_timer()
    print(f'Running time: {end - start:.2f} Seconds')


if __name__ == '__main__':
    main()
